Disassembly Listing for lubrication_cnt
Generated From:
C:/Users/eldar.dedic/SkyDrive/temp/ILLIG RDM70K podmazivanje/fw/v1.01/lubrication_cnt.X/dist/default/debug/lubrication_cnt.X.debug.cof
Sep 4, 2013 11:49:18 PM

---  C:/Users/eldar.dedic/SkyDrive/temp/ILLIG RDM70K podmazivanje/fw/v1.01/lubrication_cnt.X/main.c  ----
1:             /********************************************************************
2:              *
3:              *            Kontroler automatskog podmazivanja ILLIG RDM70K
4:              *
5:              *                    Firmware version 1.01
6:              *
7:              *********************************************************************
8:              *  Ime fajla:      main.c
9:              *
10:             *  Ovisnosti:      io_cfg.h ; pic.h
11:             *
12:             *  Procesor:       PIC12F508
13:             *
14:             *  Kompajler:      Hi Tech  PIC10/12/16 MCU family V9.70 PRO
15:             *
16:             *  Datum:          4. septembar 2013.
17:             *
18:             *  Autor:          eldar6776@hotmail.com
19:             *
20:             ******************************************************************************/
21:            //
22:            /** U K L J U C E N I  ********************************************************/
23:            //
24:            #include <pic.h>
25:            #include <htc.h>
26:            #include "typedefs.h"
27:            //
28:            /** K O N F I G U R A C I J A    P R O C E S O R A  ***************************/
29:            //
30:                __CONFIG(MCLRDIS & WDTDIS & INTRC & UNPROTECT);
31:            //
32:            //
33:            //
34:            #define _XTAL_FREQ 4000000
35:            //
36:            //---------------------- P R I S T U P   R A M   V A R I J A B L A M A
37:            #define  TestBit(var,bitno)((var) & (1 <<(bitno)))
38:            #define  SetBit(var, bitno)((var)|=1UL<<(bitno))
39:            #define  ClearBit(var, bitno)((var)&=~(1UL<<(bitno)))
40:            //
41:            /** V A R I J A B L E  ********************************************************/
42:            //
43:            unsigned char tmp1;
44:            unsigned char output_tmr;
45:            unsigned char led_tmr;
46:            unsigned int counter;
47:            unsigned int dip_sw_value;
48:            //
49:            /** K O N S T A N T E *********************************************************/
50:            //
51:            #define OUTPUT_ACTIV_TIME   40 // x 50ms = 2s
52:            #define LED_FLASH_TIME      2   // x 50ms = 100ms    
53:            //
54:            /** M A R K E R I  ************************************************************/
55:            //
56:            BYTE sys_flags;
57:            #define OLD_RST     sys_flags.b0
58:            #define OLD_CNT     sys_flags.b1
59:            #define OUT_EN_FL   sys_flags.b2
60:            #define DIP_SW_FL   sys_flags.b3
61:            #define LED_FL      sys_flags.b4
62:            
63:            BYTE hc164_shift;
64:            #define OUT0        hc164_shift.b7
65:            #define LED0        hc164_shift.b6
66:            #define CNT_3200    hc164_shift.b5
67:            #define CNT_1600    hc164_shift.b4
68:            #define CNT_800     hc164_shift.b3
69:            #define CNT_400     hc164_shift.b2
70:            #define CNT_200     hc164_shift.b1
71:            #define CNT_100     hc164_shift.b0
72:            //
73:            /** D E F I N I C I J E  ******************************************************/
74:            //
75:            #define OutputEnable()      (OUT_EN_FL = TRUE)
76:            #define OutputDisable()     (OUT_EN_FL = FALSE)
77:            #define IsOutputEnabled()   (OUT_EN_FL == TRUE)
78:            #define Output_On()         (OUT0 = LOW)
79:            #define Output_Off()        (OUT0 = HIGH)
80:            #define IsOutput_On()       (OUT0 == LOW)
81:            #define LED_On()            (LED0 = HIGH)
82:            #define LED_Off()           (LED0 = LOW)
83:            #define IsLED_On()          (LED0 == HIGH)
84:            #define ResetDIP_SW()       (hc164_shift._byte |= 0b00111111)
85:            #define SetDIP_SW_100()     (ResetDIP_SW(), CNT_100 = LOW)
86:            #define SetDIP_SW_200()     (ResetDIP_SW(), CNT_200 = LOW)
87:            #define SetDIP_SW_400()     (ResetDIP_SW(), CNT_400 = LOW)
88:            #define SetDIP_SW_800()     (ResetDIP_SW(), CNT_800 = LOW)
89:            #define SetDIP_SW_1600()    (ResetDIP_SW(), CNT_1600 = LOW)
90:            #define SetDIP_SW_3200()    (ResetDIP_SW(), CNT_3200 = LOW)
91:            //
92:            //-------------------------------- GPIO
93:            //
94:            #define OUT_DATA    GP0
95:            #define OUT_CLK     GP1
96:            #define OUT_RST     GP2
97:            #define IN_RST      GP3
98:            #define IN_CNT      GP4
99:            #define DIP_SW      GP5
100:           
101:           #define InitGPIO() (GPIO = 0x00, TRIS = 0b00111000)
102:           //
103:           //-------------------------------- TIMER
104:           //
105:           #define	TMR0_Init() (OPTION = 0b11000111, TMR0 = 61) //1:256
106:           //
107:           /** P R O T O T I P O V I   F U N K C I J A  **********************************/
108:           //
109:           void HC164_Shift(void);
110:           //
111:           //-------------------------------- program code
112:           //
113:           void main(void){
114:               //---------------------------- sys init
115:               InitGPIO();
0101  0066     CLRF GPIO
0102  0C38     MOVLW 0x38
0103  0006     TRIS GPIO
116:               TMR0_Init();
0104  0CC7     MOVLW 0xC7
0105  0002     OPTION
0106  0C3D     MOVLW 0x3D
0107  0021     MOVWF TMR0
117:               //---------------------------- ram init
118:               OLD_RST = IN_RST;
0108  0C00     MOVLW 0x0
0109  0666     BTFSC GPIO, 0x3
010A  0C01     MOVLW 0x1
010B  002C     MOVWF 0xC
010C  0194     XORWF sys_flags, W
010D  0EFE     ANDLW 0xFE
010E  018C     XORWF 0xC, W
010F  0034     MOVWF sys_flags
119:               OLD_CNT = IN_CNT;
0110  0C00     MOVLW 0x0
0111  0686     BTFSC GPIO, 0x4
0112  0C01     MOVLW 0x1
0113  002C     MOVWF 0xC
0114  036C     RLF 0xC, F
0115  0214     MOVF sys_flags, W
0116  018C     XORWF 0xC, W
0117  0EFD     ANDLW 0xFD
0118  018C     XORWF 0xC, W
0119  0034     MOVWF sys_flags
120:               DIP_SW_FL = TRUE;
011A  0574     BSF sys_flags, 0x3
121:               OUT_CLK = LOW;
011B  0426     BCF GPIO, 0x1
122:               OUT_RST = LOW;
011C  0446     BCF GPIO, 0x2
123:               OUT_RST = HIGH;
011D  0546     BSF GPIO, 0x2
124:               led_tmr = OUTPUT_ACTIV_TIME;
011E  0C28     MOVLW 0x28
011F  0036     MOVWF led_tmr
125:               LED_On();
0120  05D3     BSF hc164_shift, 0x6
126:               output_tmr = OUTPUT_ACTIV_TIME;
0121  0037     MOVWF output_tmr
127:               Output_On();
0122  04F3     BCF hc164_shift, 0x7
128:               ResetDIP_SW();
0123  0C3F     MOVLW 0x3F
0124  0133     IORWF hc164_shift, F
129:               //HC164_Shift();
130:               //---------------------------- loop
131:               while (1) {
132:                   //------------------------ 50 ms timer
133:                   if (TMR0 == 0xff) {
0125  0201     MOVF TMR0, W
0126  0FFF     XORLW 0xFF
0127  0743     BTFSS STATUS, 0x2
0128  0B3D     GOTO 0x13D
134:                       TMR0 = 61; // 50ms
0129  0C3D     MOVLW 0x3D
012A  0021     MOVWF TMR0
135:                       //-------------------- output timer
136:                       if (output_tmr) --output_tmr;
012B  0217     MOVF output_tmr, W
012C  0643     BTFSC STATUS, 0x2
012D  0B30     GOTO 0x130
012E  00F7     DECF output_tmr, F
012F  0B34     GOTO 0x134
137:                       else if(IsOutput_On()){
0130  06F3     BTFSC hc164_shift, 0x7
0131  0B34     GOTO 0x134
138:                           Output_Off();
0132  05F3     BSF hc164_shift, 0x7
139:                           HC164_Shift();
0133  090C     CALL 0xC
140:                       }// End of else...
141:                       //-------------------- LED timer
142:                       if (led_tmr) --led_tmr;
0134  0216     MOVF led_tmr, W
0135  0643     BTFSC STATUS, 0x2
0136  0B39     GOTO 0x139
0137  00F6     DECF led_tmr, F
0138  0B3D     GOTO 0x13D
143:                       else if(IsLED_On()){
0139  07D3     BTFSS hc164_shift, 0x6
013A  0B3D     GOTO 0x13D
144:                           LED_Off();
013B  04D3     BCF hc164_shift, 0x6
145:                           HC164_Shift();
013C  090C     CALL 0xC
146:                       }// End of else ...
147:                   }// End of if tmr0
148:                   //------------------------ check manual reset button
149:                   if (OLD_RST != IN_RST) {
013D  0214     MOVF sys_flags, W
013E  0E01     ANDLW 0x1
013F  002C     MOVWF 0xC
0140  0C00     MOVLW 0x0
0141  0666     BTFSC GPIO, 0x3
0142  0C01     MOVLW 0x1
0143  018C     XORWF 0xC, W
0144  0643     BTFSC STATUS, 0x2
0145  0B58     GOTO 0x158
150:                       OLD_RST = IN_RST;
0146  0C00     MOVLW 0x0
0147  0666     BTFSC GPIO, 0x3
0148  0C01     MOVLW 0x1
0149  002C     MOVWF 0xC
014A  0194     XORWF sys_flags, W
014B  0EFE     ANDLW 0xFE
014C  018C     XORWF 0xC, W
014D  0034     MOVWF sys_flags
151:                       if (IN_RST) {
014E  0766     BTFSS GPIO, 0x3
014F  0B58     GOTO 0x158
152:                           led_tmr = OUTPUT_ACTIV_TIME;
0150  0C28     MOVLW 0x28
0151  0036     MOVWF led_tmr
153:                           LED_On();
0152  05D3     BSF hc164_shift, 0x6
154:                           output_tmr = OUTPUT_ACTIV_TIME;
0153  0C28     MOVLW 0x28
0154  0037     MOVWF output_tmr
155:                           Output_On();
0155  04F3     BCF hc164_shift, 0x7
156:                           HC164_Shift();
0156  090C     CALL 0xC
157:                           DIP_SW_FL = TRUE;
0157  0574     BSF sys_flags, 0x3
158:                       }// End of if...
159:                   }// End of if...
160:                   //------------------------ check machine tact input
161:                   if (OLD_CNT != IN_CNT) {
0158  0314     RRF sys_flags, W
0159  0E01     ANDLW 0x1
015A  002C     MOVWF 0xC
015B  0C00     MOVLW 0x0
015C  0686     BTFSC GPIO, 0x4
015D  0C01     MOVLW 0x1
015E  018C     XORWF 0xC, W
015F  0643     BTFSC STATUS, 0x2
0160  0B8D     GOTO 0x18D
162:                       OLD_CNT = IN_CNT;
0161  0C00     MOVLW 0x0
0162  0686     BTFSC GPIO, 0x4
0163  0C01     MOVLW 0x1
0164  002C     MOVWF 0xC
0165  036C     RLF 0xC, F
0166  0214     MOVF sys_flags, W
0167  018C     XORWF 0xC, W
0168  0EFD     ANDLW 0xFD
0169  018C     XORWF 0xC, W
016A  0034     MOVWF sys_flags
163:                       if (IN_CNT) {
016B  0786     BTFSS GPIO, 0x4
016C  0B8D     GOTO 0x18D
164:                           if (counter) {
016D  0210     MOVF 0x10, W
016E  010F     IORWF counter, W
016F  0643     BTFSC STATUS, 0x2
0170  0B7C     GOTO 0x17C
165:                               --counter;
0171  0C01     MOVLW 0x1
0172  00AF     SUBWF counter, F
0173  0703     BTFSS STATUS, 0x0
0174  00F0     DECF 0x10, F
166:                               if(!led_tmr) led_tmr = LED_FLASH_TIME;
0175  0236     MOVF led_tmr, F
0176  0743     BTFSS STATUS, 0x2
0177  0B7A     GOTO 0x17A
0178  0C02     MOVLW 0x2
0179  0036     MOVWF led_tmr
167:                               LED_On();
017A  05D3     BSF hc164_shift, 0x6
168:                               HC164_Shift();
017B  090C     CALL 0xC
169:                           }// End of if...
170:                           if(!counter){
017C  0210     MOVF 0x10, W
017D  010F     IORWF counter, W
017E  0743     BTFSS STATUS, 0x2
017F  0B8D     GOTO 0x18D
171:                               if (IsOutputEnabled()) {
0180  0754     BTFSS sys_flags, 0x2
0181  0B8A     GOTO 0x18A
172:                                   led_tmr = OUTPUT_ACTIV_TIME;
0182  0C28     MOVLW 0x28
0183  0036     MOVWF led_tmr
173:                                   LED_On();
0184  05D3     BSF hc164_shift, 0x6
174:                                   output_tmr = OUTPUT_ACTIV_TIME;
0185  0C28     MOVLW 0x28
0186  0037     MOVWF output_tmr
175:                                   Output_On();
0187  04F3     BCF hc164_shift, 0x7
176:                                   DIP_SW_FL = TRUE;
0188  0574     BSF sys_flags, 0x3
0189  0B8C     GOTO 0x18C
177:                               } else {
178:                                   Output_Off();
018A  05F3     BSF hc164_shift, 0x7
179:                                   LED_Off();
018B  04D3     BCF hc164_shift, 0x6
180:                               }// End of else...
181:                               HC164_Shift();
018C  090C     CALL 0xC
182:                           }// End of else...
183:                       }// End of if...
184:                   }// End of if...
185:                   //------------------------ check dip switch
186:                   if (DIP_SW_FL) {
018D  0774     BTFSS sys_flags, 0x3
018E  0B25     GOTO 0x125
187:                       DIP_SW_FL = FALSE;
018F  0474     BCF sys_flags, 0x3
188:                       dip_sw_value = 0;
0190  0071     CLRF dip_sw_value
0191  0072     CLRF 0x12
189:                       SetDIP_SW_100();
0192  0C3F     MOVLW 0x3F
0193  0133     IORWF hc164_shift, F
0194  0413     BCF hc164_shift, 0x0
190:                       HC164_Shift();
0195  090C     CALL 0xC
191:                       __delay_us(10);
0196  0C03     MOVLW 0x3
0197  002C     MOVWF 0xC
0198  02EC     DECFSZ 0xC, F
0199  0B98     GOTO 0x198
192:                       if (DIP_SW == LOW) dip_sw_value += 100;
019A  06A6     BTFSC GPIO, 0x5
019B  0BA0     GOTO 0x1A0
019C  0C64     MOVLW 0x64
019D  01F1     ADDWF dip_sw_value, F
019E  0603     BTFSC STATUS, 0x0
019F  02B2     INCF 0x12, F
193:                       SetDIP_SW_200();
01A0  0C3F     MOVLW 0x3F
01A1  0133     IORWF hc164_shift, F
01A2  0433     BCF hc164_shift, 0x1
194:                       HC164_Shift();
01A3  090C     CALL 0xC
195:                       __delay_us(10);
01A4  0C03     MOVLW 0x3
01A5  002C     MOVWF 0xC
01A6  02EC     DECFSZ 0xC, F
01A7  0BA6     GOTO 0x1A6
196:                       if (DIP_SW == LOW) dip_sw_value += 200;
01A8  06A6     BTFSC GPIO, 0x5
01A9  0BAE     GOTO 0x1AE
01AA  0CC8     MOVLW 0xC8
01AB  01F1     ADDWF dip_sw_value, F
01AC  0603     BTFSC STATUS, 0x0
01AD  02B2     INCF 0x12, F
197:                       SetDIP_SW_400();
01AE  0C3F     MOVLW 0x3F
01AF  0133     IORWF hc164_shift, F
01B0  0453     BCF hc164_shift, 0x2
198:                       HC164_Shift();
01B1  090C     CALL 0xC
199:                       __delay_us(10);
01B2  0C03     MOVLW 0x3
01B3  002C     MOVWF 0xC
01B4  02EC     DECFSZ 0xC, F
01B5  0BB4     GOTO 0x1B4
200:                       if (DIP_SW == LOW) dip_sw_value += 400;
01B6  06A6     BTFSC GPIO, 0x5
01B7  0BBE     GOTO 0x1BE
01B8  0C90     MOVLW 0x90
01B9  01F1     ADDWF dip_sw_value, F
01BA  0603     BTFSC STATUS, 0x0
01BB  02B2     INCF 0x12, F
01BC  0C01     MOVLW 0x1
01BD  01F2     ADDWF 0x12, F
201:                       SetDIP_SW_800();
01BE  0C3F     MOVLW 0x3F
01BF  0133     IORWF hc164_shift, F
01C0  0473     BCF hc164_shift, 0x3
202:                       HC164_Shift();
01C1  090C     CALL 0xC
203:                       __delay_us(10);
01C2  0C03     MOVLW 0x3
01C3  002C     MOVWF 0xC
01C4  02EC     DECFSZ 0xC, F
01C5  0BC4     GOTO 0x1C4
204:                       if (DIP_SW == LOW) dip_sw_value += 800;
01C6  06A6     BTFSC GPIO, 0x5
01C7  0BCE     GOTO 0x1CE
01C8  0C20     MOVLW 0x20
01C9  01F1     ADDWF dip_sw_value, F
01CA  0603     BTFSC STATUS, 0x0
01CB  02B2     INCF 0x12, F
01CC  0C03     MOVLW 0x3
01CD  01F2     ADDWF 0x12, F
205:                       SetDIP_SW_1600();
01CE  0C3F     MOVLW 0x3F
01CF  0133     IORWF hc164_shift, F
01D0  0493     BCF hc164_shift, 0x4
206:                       HC164_Shift();
01D1  090C     CALL 0xC
207:                       __delay_us(10);
01D2  0C03     MOVLW 0x3
01D3  002C     MOVWF 0xC
01D4  02EC     DECFSZ 0xC, F
01D5  0BD4     GOTO 0x1D4
208:                       if (DIP_SW == LOW) dip_sw_value += 1600;
01D6  06A6     BTFSC GPIO, 0x5
01D7  0BDE     GOTO 0x1DE
01D8  0C40     MOVLW 0x40
01D9  01F1     ADDWF dip_sw_value, F
01DA  0603     BTFSC STATUS, 0x0
01DB  02B2     INCF 0x12, F
01DC  0C06     MOVLW 0x6
01DD  01F2     ADDWF 0x12, F
209:                       SetDIP_SW_3200();
01DE  0C3F     MOVLW 0x3F
01DF  0133     IORWF hc164_shift, F
01E0  04B3     BCF hc164_shift, 0x5
210:                       HC164_Shift();
01E1  090C     CALL 0xC
211:                       __delay_us(10);
01E2  0C03     MOVLW 0x3
01E3  002C     MOVWF 0xC
01E4  02EC     DECFSZ 0xC, F
01E5  0BE4     GOTO 0x1E4
212:                       if (DIP_SW == LOW) dip_sw_value += 3200;
01E6  06A6     BTFSC GPIO, 0x5
01E7  0BEE     GOTO 0x1EE
01E8  0C80     MOVLW 0x80
01E9  01F1     ADDWF dip_sw_value, F
01EA  0603     BTFSC STATUS, 0x0
01EB  02B2     INCF 0x12, F
01EC  0C0C     MOVLW 0xC
01ED  01F2     ADDWF 0x12, F
213:                       ResetDIP_SW();
01EE  0C3F     MOVLW 0x3F
01EF  0133     IORWF hc164_shift, F
214:                       HC164_Shift();
01F0  090C     CALL 0xC
215:                       counter = dip_sw_value;
01F1  0212     MOVF 0x12, W
01F2  0030     MOVWF 0x10
01F3  0211     MOVF dip_sw_value, W
01F4  002F     MOVWF counter
216:                       if (dip_sw_value == 0){
01F5  0212     MOVF 0x12, W
01F6  0111     IORWF dip_sw_value, W
01F7  0743     BTFSS STATUS, 0x2
01F8  0BFD     GOTO 0x1FD
217:                           OutputDisable();
01F9  0454     BCF sys_flags, 0x2
218:                           Output_Off();
01FA  05F3     BSF hc164_shift, 0x7
219:                           HC164_Shift();
01FB  090C     CALL 0xC
01FC  0B25     GOTO 0x125
220:                       } else OutputEnable();
01FD  0554     BSF sys_flags, 0x2
221:                   }// End of if...
222:               }// End of while
223:           }// End of main
224:           
225:           void HC164_Shift(void) {
226:               tmp1 = 8;
00E4  0C08     MOVLW 0x8
00E5  0035     MOVWF tmp1
227:               while (tmp1) {
00E6  0235     MOVF tmp1, F
00E7  0643     BTFSC STATUS, 0x2
00E8  0AFF     GOTO 0xFF
00FE  0AE6     GOTO 0xE6
00FF  020B     MOVF 0xB, W
0100  0022     MOVWF PCL
228:                   if (TestBit(hc164_shift._byte, (tmp1 - 1))) OUT_DATA = HIGH;
00E9  0C01     MOVLW 0x1
00EA  0027     MOVWF 0x7
00EB  00D5     DECF tmp1, W
00EC  0028     MOVWF 0x8
00ED  0288     INCF 0x8, W
00EE  0AF1     GOTO 0xF1
00EF  0403     BCF STATUS, 0x0
00F0  0367     RLF 0x7, F
00F1  0029     MOVWF 0x9
00F2  02C9     DECFSZ 0x9, W
00F3  0AEF     GOTO 0xEF
00F4  0207     MOVF 0x7, W
00F5  0153     ANDWF hc164_shift, W
00F6  0643     BTFSC STATUS, 0x2
00F7  0AFA     GOTO 0xFA
00F8  0506     BSF GPIO, 0x0
00F9  0AFB     GOTO 0xFB
229:                   else OUT_DATA = LOW;
00FA  0406     BCF GPIO, 0x0
230:                   OUT_CLK = HIGH;
00FB  0526     BSF GPIO, 0x1
231:                   OUT_CLK = LOW;
00FC  0426     BCF GPIO, 0x1
232:                   tmp1--;
00FD  00F5     DECF tmp1, F
233:               }// End of while
234:           }// End of hc164 shift
